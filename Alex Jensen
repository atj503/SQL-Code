/****** Script for SelectTopNRows command from SSMS  ******/
SELECT TOP (1000) [UniqueID ]
      ,[ParcelID]
      ,[LandUse]
      ,[PropertyAddress]
      ,[SaleDate]
      ,[SalePrice]
      ,[LegalReference]
      ,[SoldAsVacant]
      ,[OwnerName]
      ,[OwnerAddress]
      ,[Acreage]
      ,[TaxDistrict]
      ,[LandValue]
      ,[BuildingValue]
      ,[TotalValue]
      ,[YearBuilt]
      ,[Bedrooms]
      ,[FullBath]
      ,[HalfBath]
  FROM [Portfolio Project].[dbo].[NashvilleHousing]


  --Standardize Date Format, Convert the Saledate to a standard Date format

  Select SaleDateConverted, CONVERT (Date,Saledate)
  From [Portfolio Project].dbo.NashvilleHousing

  ALTER TABLE NashvilleHousing
  Add SaleDateConverted Date;

  Update NashvilleHousing
  SET SaleDateConverted = CONVERT(Date, SaleDate)

  -- Populate Property Address Data- Find likely matches for 'Null' PropertyAddress and fill in the missing data

  Select *
  From [Portfolio Project].dbo.NashvilleHousing
Order by ParcelID

--Join the table on itself so you can identify rows with matching ParcelIDs but missing a property ID
--If the Parcel ID is the same but the address is missing, use the address from one of the Parcel IDs to fill in the missing address

  Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress)
  From [Portfolio Project].dbo.NashvilleHousing a
  JOIN [Portfolio Project].dbo.NashvilleHousing b
  on a.ParcelID = b.ParcelID
  AND a.[UniqueID ] <> b.[UniqueID ]
  Where a.PropertyAddress is null

--ISNULL identifies null values and replaces them with whatever you want, in this case its the corresponding PropertyAddress from the matching Parcel ID

Update a
Set PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
From [Portfolio Project].dbo.NashvilleHousing a
  JOIN [Portfolio Project].dbo.NashvilleHousing b
  on a.ParcelID = b.ParcelID
  AND a.[UniqueID ] <> b.[UniqueID ]
Where a.PropertyAddress is null


-- Breaking Address into Individual Columns (Address, City, State)

Select PropertyAddress
From [Portfolio Project].dbo.NashvilleHousing

--Using CHARINDEX to identify where the comma is in the Property Address to break apart the data
--To remove the comma from the potential data, add -1 into the query to take off the last letter(in this case the comma)
--This seperates the values in the Property Address column. The first substring seperates at the comma, and usinjg -1 removes the comma from the query
--The second substring uses the same idea as the first, except it starts at the comma. The +1 removes the comma because it is the first character.
--Setting the final perameter, making the query end at the end of the PropertyAddress. Use LEN to tell the query where to end. 

Select
Substring(PropertyAddress, 1, CHARINDEX(',',PropertyAddress) -1) as Address
, Substring(PropertyAddress, CHARINDEX(',',PropertyAddress) +1, LEN(PropertyAddress)) as Address
From [Portfolio Project].dbo.NashvilleHousing


--Alter the table by adding columns, in this case the split address and city

  ALTER TABLE NashvilleHousing
  Add PropertySplitAddress Nvarchar(255);

  Update NashvilleHousing
  SET PropertySplitAddress = Substring(PropertyAddress, 1, CHARINDEX(',',PropertyAddress) -1) 


ALTER TABLE NashvilleHousing
  Add PropertySplitCity Nvarchar(255);

  Update NashvilleHousing
  SET PropertySplitCity = Substring(PropertyAddress, CHARINDEX(',',PropertyAddress) +1, LEN(PropertyAddress))

  Select *
From [Portfolio Project].dbo.NashvilleHousing

  Select OwnerAddress
From [Portfolio Project].dbo.NashvilleHousing

--Using PARSEMAN to break the address up. Looks for periods so REPLACED the period with a comma. The number signifies the order it is displayed. 
--After Parsing out the address use Alter Table to add the new columns into the table and update the data

Select
PARSENAME(Replace(OwnerAddress,',','.'),3)
,PARSENAME(Replace(OwnerAddress,',','.'),2)
,PARSENAME(Replace(OwnerAddress,',','.'),1)
FROM [Portfolio Project].dbo.NashvilleHousing

ALTER TABLE NashvilleHousing
  Add OwnerSplitAddress Nvarchar(255);

  Update NashvilleHousing
  SET OwnerSplitAddress = PARSENAME(Replace(OwnerAddress,',','.'),3)

  ALTER TABLE NashvilleHousing
  Add OwnerSplitCity Nvarchar(255);

  Update NashvilleHousing
  SET OwnerSplitCity = PARSENAME(Replace(OwnerAddress,',','.'),2)


  ALTER TABLE NashvilleHousing
  Add OwnerSplitState Nvarchar(255);

  Update NashvilleHousing
  SET OwnerSplitState = PARSENAME(Replace(OwnerAddress,',','.'),1)

  Select *
From [Portfolio Project].dbo.NashvilleHousing


--Change Y and N to Yes and No in "Sold as Vacant" field
--Using a Case to switch the Y to Yes and the N to No
--Update data base when finsihed

Select Distinct(SoldAsVacant), Count(SoldAsVacant)
From [Portfolio Project].dbo.NashvilleHousing
Group By SoldAsVacant
Order by 2

Select SoldAsVacant
, CASE when SoldAsVacant = 'Y' then 'Yes'
       when SoldAsVacant = 'N' then 'No'
	   Else SoldAsVacant
	   End
From [Portfolio Project].dbo.NashvilleHousing

Update NashvilleHousing
SET SoldAsVacant = CASE when SoldAsVacant = 'Y' then 'Yes'
       when SoldAsVacant = 'N' then 'No'
	   Else SoldAsVacant
	   End
From [Portfolio Project].dbo.NashvilleHousing

--Remove Duplicates, use a CTE to figure out how many duplicates and create a row identifying duplicates (row_num)

With RowNumCTE AS(
SELECT *,
	ROW_NUMBER() OVER (
	Partition BY ParcelID, 
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 Order by 
					UniqueID
					) row_num
				
FROM [Portfolio Project].dbo.NashvilleHousing
)
Select *
FROM RowNumCTE
Where Row_num > 1

--Delete the duplicate data, use DELETE instead of SELECT to remove all row_num > 1

With RowNumCTE AS(
SELECT *,
	ROW_NUMBER() OVER (
	Partition BY ParcelID, 
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 Order by 
					UniqueID
					) row_num
				
FROM [Portfolio Project].dbo.NashvilleHousing
)
DELETE
FROM RowNumCTE
Where Row_num > 1


--Delete Unused Columns, Alter the table and drop columns you do not want

Select*
From [Portfolio Project].dbo.NashvilleHousing

Alter Table [Portfolio Project].dbo.NashvilleHousing
Drop Column SaleDate
